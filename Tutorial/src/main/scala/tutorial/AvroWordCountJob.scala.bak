/*
 * Copyright (c) 2012 Twitter, Inc.
 *
 * This program is licensed to you under the Apache License Version 2.0,
 * and you may not use this file except in compliance with the Apache License Version 2.0.
 * You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the Apache License Version 2.0 is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
 */
package tutorial

// Scalding
import com.twitter.scalding._
import com.miguno.avro._
import com.twitter.scalding.avro._


//@miguno's avro-twitter-example ported to @scalding c/o @michaelmoss
class AvroWordCountJob(args: Args) extends Job(args) {

  val input  = "data/twitter.avro"
  val output = "data/AvroWordCountOutput.tsv"                   //args.getOrElse("output", null)

  val results = PackedAvroSource[twitter_schema](input)         //(args("input"))
    .flatMap('twitter_schema -> 'word) {
    tweet: twitter_schema => tokenize(tweet.getTweet)
  }
    .groupBy('word) {
    _.size
  }


  if (output != null) {
    results.write(Tsv(output))
  }
  else {
    results.debug.write(NullSource)
  }

  def tokenize(text: String): Array[String] = {
    text.toLowerCase.replaceAll("[^a-zA-Z0-9\\s]", "").split("\\s+")
  }
}
