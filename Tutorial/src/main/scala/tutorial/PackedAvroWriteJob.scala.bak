/*
 * Copyright (c) 2012 Twitter, Inc.
 *
 * This program is licensed to you under the Apache License Version 2.0,
 * and you may not use this file except in compliance with the Apache License Version 2.0.
 * You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the Apache License Version 2.0 is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
 */
package tutorial

import com.twitter.scalding._
import com.twitter.scalding.avro.{PackedAvroSource, UnpackedAvroSource}

import com.miguno.avro._
import org.apache.avro.Schema
import org.apache.avro.specific.{SpecificRecord, SpecificRecordBase}


//class Default_Twitter_Schema extends Twitter_Schema()
case class Twitter_Schema(var username: String, var tweet: String, var timestamp: Long)//extends twitter_schema {
//case class Twitter_Schema() extends twitter_schema {
extends SpecificRecordBase with SpecificRecord {
def this() = this("","", 0L)
/*
  def setUsername(value: String) {
    this.username = value;
  }

  def setTweet(value: String) {
    this.tweet = value;
  }

  def setTimestamp(value: Long) {
    this.timestamp = value;
  }
*/


//extends SpecificRecordBase with SpecificRecord {
 // def this() { this(u=())}//username = "", tweet = "", timestamp = 1L) }
//def this() {this(username="foo", tweet="bar", timestamp =1L)}

//println(Twitter_Schema())
//def this() { this(b = bDefault) }

//case class Person(name: String, age: Int)

  //extends SpecificRecord{// implements SpecificRecord {
  def put(field: Int, value: scala.Any) = {
    val fields = (this.getClass.getDeclaredFields())
    fields(field).set(this,value)
  }
  def getSchema: Schema = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"twitter_schema\",\"namespace\":\"com.miguno.avro\",\"fields\":[{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the user account on Twitter.com\"},{\"name\":\"tweet\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The content of the user's Twitter message\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Unix epoch time in seconds\"}],\"doc:\":\"A basic schema for storing Twitter messages\"}")//new Schema.Parser().parse(AvroType[Person].schema.toString)
  def get(field: Int): AnyRef = {
    if (field == 1)
      username
    if (field == 2)
      tweet
    else
      timestamp
  val fields = this.getClass.getDeclaredFields()
  fields(field).get(this)
  }
}

//}
object Twitter_Schema {
  val SCHEMA$: org.apache.avro.Schema = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"twitter_schema\",\"namespace\":\"com.miguno.avro\",\"fields\":[{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the user account on Twitter.com\"},{\"name\":\"tweet\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The content of the user's Twitter message\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Unix epoch time in seconds\"}],\"doc:\":\"A basic schema for storing Twitter messages\"}");

  def getClassSchema():org.apache.avro.Schema = { SCHEMA$; }



  //class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase[Twitter_Schema](Twitter_Schema.SCHEMA$)  with org.apache.avro.data.RecordBuilder[Twitter_Schema]  {

   // private var username: String = _;
   // private var tweet: String = _;
  //  private var timestamp: Long = _;

    /** Creates a new Builder */
  //  private Builder() {
 //     super(com.miguno.avro.twitter_schema.SCHEMA$);
 //   }
   

    /** Creates a Builder by copying an existing Builder */
/*
//    private def Builder(other: com.miguno.avro.twitter_schema.Builder ) {
    private def Builder(other: Twitter_Schema.Builder ) {
 //     super(other);
      if (isValidValue(fields()(0), other.username)) {
      //if (true) {
        this.username = data().deepCopy(fields()(0).schema(), other.username);
        fieldSetFlags()(0) = true;
      }
//      if (isValidValue(fields()(1), other.tweet)) {
      if (true) {
        this.tweet = data().deepCopy(fields()(1).schema(), other.tweet);
        fieldSetFlags()(1) = true;
      }
//      if (isValidValue(fields()(2), other.timestamp)) {
      if (true) {
        this.timestamp = data().deepCopy(fields()(2).schema(), other.timestamp);
        fieldSetFlags()(2) = true;
      }
    }
    
*/

    /** Creates a Builder by copying an existing twitter_schema instance */
/*
    private def Builder(other: Twitter_Schema ) {
//            super(com.miguno.avro.twitter_schema.SCHEMA$);
           // super(com.miguno.avro.twitter_schema.S$);
//      if (isValidValue(fields()(0), other.username)) {
      if (true) {
        this.username = data().deepCopy(fields()(0).schema(), other.username);
        fieldSetFlags()(0) = true;
      }
//      if (isValidValue(fields()(1), other.tweet)) {
      if (true) {
        this.tweet = data().deepCopy(fields()(1).schema(), other.tweet);
        fieldSetFlags()(1) = true;
      }
//      if (isValidValue(fields()(2), other.timestamp)) {
      if (true) {
        this.timestamp = data().deepCopy(fields()(2).schema(), other.timestamp);
        fieldSetFlags()(2) = true;
      }
    }

  }

*/
//}
}


/**
 * hadoop jar chapter3-0-jar-with-dependencies.jar com.twitter.scalding.Tool -Dmapred.output.compress=true AvroExample --hdfs
 *
 */
class PackedAvroWriteJob(args: Args) extends Job(args) {



  /**
   * Dummy data
   */
  val testList = List(
    ("name1", "tweet1", 10L),
    ("name2", "tweet2", 20L),
    ("name3", "tweet3", 30L))


//  implicit val avroSchema = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"twitter_schema\",\"namespace\":\"com.miguno.avro\",\"fields\":[{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the user account on Twitter.com\"},{\"name\":\"tweet\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The content of the user's Twitter message\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Unix epoch time in seconds\"}],\"doc:\":\"A basic schema for storing Twitter messages\"}")
   //new Schema.Parser().parse(AvroType[Twitter_Schema].schema.toString)

  /**
    * Write dummy data to PackedAvro
    */
  val writeToPackedAvro =

    IterableSource[(String, String, Long)](testList, ('username, 'tweet, 'timestamp)).read
   // IterableSource[twitter_schema](testList, ('username, 'tweet, 'timestamp)).read
      .map('username -> 'username) { x: String => "My name is " + x}
      .mapTo(('username, 'tweet, 'timestamp) -> 'p) {
        t:(String, String, Long) => {

          Twitter_Schema(t._1, t._2, t._3)
/*
          val tweet = new Twitter_Schema()
          tweet.setUsername(t._1)
          tweet.setTweet(t._2)
          tweet.setTimestamp(t._3)
          tweet
*/

        }
      }
      .project('p)
      .debug
//      .write(PackedAvroSource[twitter_schema]("data/PackedAvroOutput.avro"))
      .write(PackedAvroSource[Twitter_Schema]("data/PackedAvroOutput.avro"))

}
